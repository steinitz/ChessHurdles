import { appDatabase } from '~stzUser/lib/database';
import { newTestUser, EmailTester } from './EmailTester';
import { testConstants } from '~stzUser/test/constants';
import { signUp } from '~stzUser/lib/auth-client';
import { auth } from '~stzUser/lib/auth';
import { expect } from '@playwright/test';

/**
 * Utility functions for checking user verification status in E2E tests
 */

/**
 * Check if a user's email is verified by email address
 * @param email - The user's email address
 * @returns boolean - true if email is verified, false otherwise
 */
export async function isEmailVerified(email: string): Promise<boolean> {
  try {
    const stmt = appDatabase.prepare('SELECT emailVerified FROM user WHERE email = ?');
    const result = stmt.get(email) as { emailVerified: number } | undefined;
    
    // SQLite stores boolean as 0/1, convert to boolean
    return result ? Boolean(result.emailVerified) : false;
  } catch (error) {
    console.error('Error checking email verification status:', error);
    return false;
  }
}

/**
 * Check if a user's email is verified by user ID
 * @param userId - The user's ID
 * @returns boolean - true if email is verified, false otherwise
 */
export async function isEmailVerifiedById(userId: string): Promise<boolean> {
  try {
    const stmt = appDatabase.prepare('SELECT emailVerified FROM user WHERE id = ?');
    const result = stmt.get(userId) as { emailVerified: number } | undefined;
    
    // SQLite stores boolean as 0/1, convert to boolean
    return result ? Boolean(result.emailVerified) : false;
  } catch (error) {
    console.error('Error checking email verification status:', error);
    return false;
  }
}

/**
 * Get user data by email address
 * @param email - The user's email address
 * @returns User data or null if not found
 */
export async function getUserByEmail(email: string): Promise<{
  id: string;
  name: string;
  email: string;
  emailVerified: boolean;
  createdAt: Date;
  updatedAt: Date;
} | null> {
  try {
    const stmt = appDatabase.prepare('SELECT * FROM user WHERE email = ?');
    const result = stmt.get(email) as any;
    
    if (!result) return null;
    
    return {
      ...result,
      emailVerified: Boolean(result.emailVerified)
    };
  } catch (error) {
    console.error('Error getting user by email:', error);
    return null;
  }
}

/**
 * Create a verified test user using the signup flow
 * Uses signUp.email followed by manual email verification
 * 
 * Note: This function calls signUp.email which triggers sendVerificationEmail
 * and will generate a verification email during user creation. If your test is
 * counting emails, allow for this additional email in your assertions.
 * 
 * @param options - Optional user data overrides
 * @returns The created user's email address
 */
export async function createVerifiedTestUser(options?: {
  name?: string;
  email?: string;
  password?: string;
}): Promise<string> {
  const email = options?.email || newTestUser();
  const name = options?.name || testConstants.defaultUserName;
  const password = options?.password || testConstants.defaultPassword;
  
  try {
    // Create user using Better Auth signup
    const { data, error } = await signUp.email({
      email,
      name,
      password,
    });
    
    if (error) {
      console.error('Error creating test user via signup:', error);
      console.error('Error type:', typeof error);
      console.error('Error keys:', Object.keys(error));
      throw new Error(`Signup failed: ${JSON.stringify(error)}`);
    }
    
    expect(data?.user?.id).toBeDefined();
    
    // Capture the verification email generated by signUp.email and extract the token
    try {
      const sentEmails = EmailTester.getSentEmails();
      const verificationEmail = sentEmails.find(email =>
        email.envelope.to.includes(data.user.email) &&
        email.subject.includes('Verify your email')
      );

      expect(verificationEmail).toBeDefined();

      const verificationLinks = EmailTester.extractVerificationLinks(verificationEmail!);
      expect(verificationLinks.length).toBeGreaterThan(0);
      console.log(`üîó Found ${verificationLinks.length} verification link(s) in email`);

      const verificationUrl = verificationLinks[0];
      const urlParams = new URL(verificationUrl);
      const token = urlParams.searchParams.get('token');
      expect(token).toBeDefined();

      // Use Better Auth's verifyEmail API to complete verification
      const verifyResult = await auth.api.verifyEmail({
        query: {token: token!}
      });
      expect(verifyResult).toBeTruthy();

      console.log('‚úÖ Email address verified using extracted token from verification email address');

        // Confirm verification worked by checking database
        const isVerified = await isEmailVerified(data.user.email);
        expect(isVerified).toBe(true);
        console.log('‚úÖ Database confirms email address is verified');
    } catch (tokenErr) {
      console.error('‚ùå Token extraction approach failed:', tokenErr);
      // Re-throw to let the test framework handle the assertion failure
      throw tokenErr;
    }
    
    return email;
  } catch (error) {
    console.error('Error creating verified test user:', error);
    throw error;
  }
}