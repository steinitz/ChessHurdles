/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as ContactRouteImport } from './routes/contact'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthVerifyEmailRouteImport } from './routes/auth/verify-email'
import { Route as AuthUsersRouteImport } from './routes/auth/users'
import { Route as AuthSignupRouteImport } from './routes/auth/signup'
import { Route as AuthSigninRouteImport } from './routes/auth/signin'
import { Route as AuthSetNewPasswordRouteImport } from './routes/auth/setNewPassword'
import { Route as AuthRequestPasswordResetRouteImport } from './routes/auth/requestPasswordReset'
import { Route as AuthProfileRouteImport } from './routes/auth/profile'
import { Route as AuthForRouteTroubleshootingRouteImport } from './routes/auth/forRouteTroubleshooting'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthVerifyEmailRoute = AuthVerifyEmailRouteImport.update({
  id: '/auth/verify-email',
  path: '/auth/verify-email',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthUsersRoute = AuthUsersRouteImport.update({
  id: '/auth/users',
  path: '/auth/users',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSignupRoute = AuthSignupRouteImport.update({
  id: '/auth/signup',
  path: '/auth/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSigninRoute = AuthSigninRouteImport.update({
  id: '/auth/signin',
  path: '/auth/signin',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSetNewPasswordRoute = AuthSetNewPasswordRouteImport.update({
  id: '/auth/setNewPassword',
  path: '/auth/setNewPassword',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRequestPasswordResetRoute =
  AuthRequestPasswordResetRouteImport.update({
    id: '/auth/requestPasswordReset',
    path: '/auth/requestPasswordReset',
    getParentRoute: () => rootRouteImport,
  } as any)
const AuthProfileRoute = AuthProfileRouteImport.update({
  id: '/auth/profile',
  path: '/auth/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthForRouteTroubleshootingRoute =
  AuthForRouteTroubleshootingRouteImport.update({
    id: '/auth/forRouteTroubleshooting',
    path: '/auth/forRouteTroubleshooting',
    getParentRoute: () => rootRouteImport,
  } as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/contact': typeof ContactRoute
  '/auth/forRouteTroubleshooting': typeof AuthForRouteTroubleshootingRoute
  '/auth/profile': typeof AuthProfileRoute
  '/auth/requestPasswordReset': typeof AuthRequestPasswordResetRoute
  '/auth/setNewPassword': typeof AuthSetNewPasswordRoute
  '/auth/signin': typeof AuthSigninRoute
  '/auth/signup': typeof AuthSignupRoute
  '/auth/users': typeof AuthUsersRoute
  '/auth/verify-email': typeof AuthVerifyEmailRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/contact': typeof ContactRoute
  '/auth/forRouteTroubleshooting': typeof AuthForRouteTroubleshootingRoute
  '/auth/profile': typeof AuthProfileRoute
  '/auth/requestPasswordReset': typeof AuthRequestPasswordResetRoute
  '/auth/setNewPassword': typeof AuthSetNewPasswordRoute
  '/auth/signin': typeof AuthSigninRoute
  '/auth/signup': typeof AuthSignupRoute
  '/auth/users': typeof AuthUsersRoute
  '/auth/verify-email': typeof AuthVerifyEmailRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/contact': typeof ContactRoute
  '/auth/forRouteTroubleshooting': typeof AuthForRouteTroubleshootingRoute
  '/auth/profile': typeof AuthProfileRoute
  '/auth/requestPasswordReset': typeof AuthRequestPasswordResetRoute
  '/auth/setNewPassword': typeof AuthSetNewPasswordRoute
  '/auth/signin': typeof AuthSigninRoute
  '/auth/signup': typeof AuthSignupRoute
  '/auth/users': typeof AuthUsersRoute
  '/auth/verify-email': typeof AuthVerifyEmailRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/contact'
    | '/auth/forRouteTroubleshooting'
    | '/auth/profile'
    | '/auth/requestPasswordReset'
    | '/auth/setNewPassword'
    | '/auth/signin'
    | '/auth/signup'
    | '/auth/users'
    | '/auth/verify-email'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/contact'
    | '/auth/forRouteTroubleshooting'
    | '/auth/profile'
    | '/auth/requestPasswordReset'
    | '/auth/setNewPassword'
    | '/auth/signin'
    | '/auth/signup'
    | '/auth/users'
    | '/auth/verify-email'
  id:
    | '__root__'
    | '/'
    | '/contact'
    | '/auth/forRouteTroubleshooting'
    | '/auth/profile'
    | '/auth/requestPasswordReset'
    | '/auth/setNewPassword'
    | '/auth/signin'
    | '/auth/signup'
    | '/auth/users'
    | '/auth/verify-email'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ContactRoute: typeof ContactRoute
  AuthForRouteTroubleshootingRoute: typeof AuthForRouteTroubleshootingRoute
  AuthProfileRoute: typeof AuthProfileRoute
  AuthRequestPasswordResetRoute: typeof AuthRequestPasswordResetRoute
  AuthSetNewPasswordRoute: typeof AuthSetNewPasswordRoute
  AuthSigninRoute: typeof AuthSigninRoute
  AuthSignupRoute: typeof AuthSignupRoute
  AuthUsersRoute: typeof AuthUsersRoute
  AuthVerifyEmailRoute: typeof AuthVerifyEmailRoute
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$'
  id: '__root__' | '/api/auth/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/verify-email': {
      id: '/auth/verify-email'
      path: '/auth/verify-email'
      fullPath: '/auth/verify-email'
      preLoaderRoute: typeof AuthVerifyEmailRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/users': {
      id: '/auth/users'
      path: '/auth/users'
      fullPath: '/auth/users'
      preLoaderRoute: typeof AuthUsersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/signup': {
      id: '/auth/signup'
      path: '/auth/signup'
      fullPath: '/auth/signup'
      preLoaderRoute: typeof AuthSignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/signin': {
      id: '/auth/signin'
      path: '/auth/signin'
      fullPath: '/auth/signin'
      preLoaderRoute: typeof AuthSigninRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/setNewPassword': {
      id: '/auth/setNewPassword'
      path: '/auth/setNewPassword'
      fullPath: '/auth/setNewPassword'
      preLoaderRoute: typeof AuthSetNewPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/requestPasswordReset': {
      id: '/auth/requestPasswordReset'
      path: '/auth/requestPasswordReset'
      fullPath: '/auth/requestPasswordReset'
      preLoaderRoute: typeof AuthRequestPasswordResetRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/profile': {
      id: '/auth/profile'
      path: '/auth/profile'
      fullPath: '/auth/profile'
      preLoaderRoute: typeof AuthProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/forRouteTroubleshooting': {
      id: '/auth/forRouteTroubleshooting'
      path: '/auth/forRouteTroubleshooting'
      fullPath: '/auth/forRouteTroubleshooting'
      preLoaderRoute: typeof AuthForRouteTroubleshootingRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ContactRoute: ContactRoute,
  AuthForRouteTroubleshootingRoute: AuthForRouteTroubleshootingRoute,
  AuthProfileRoute: AuthProfileRoute,
  AuthRequestPasswordResetRoute: AuthRequestPasswordResetRoute,
  AuthSetNewPasswordRoute: AuthSetNewPasswordRoute,
  AuthSigninRoute: AuthSigninRoute,
  AuthSignupRoute: AuthSignupRoute,
  AuthUsersRoute: AuthUsersRoute,
  AuthVerifyEmailRoute: AuthVerifyEmailRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
